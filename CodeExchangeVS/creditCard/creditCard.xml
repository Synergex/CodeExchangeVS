<?xml version='1.0'?>
<!--Generated by xmldoc v9.4.4a on 27 OCT 2010 13:39:04-->
<doc>
  <assembly>
    <name>CCtest</name>
  </assembly>
  <members>
    <member name="M:SynPSG.Core.Utilities.CreditCard.isValid(SynPSG.Core.Utilities.CreditCardType,System.Int32)">
      <summary>
      Check credit card is a valid card number
      </summary>
       <param name="a_ccType">Card type</param>
       <param name="a_ccNumber">Credit card number</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.CreditCard.isValid(SynPSG.Core.Utilities.CreditCardType,System.String)">
      <summary>
      Check credit card is a valid card number
      </summary>
       <param name="a_ccType">Card type</param>
       <param name="a_ccNumber">Credit card number</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.CreditCard.isValid(Synergex.SynergyDE.i,Synergex.SynergyDE.a)">
      <summary>
      Check credit card is a valid card number
      </summary>
       <param name="a_ccType">Card type</param>
       <param name="a_ccNumber">Credit card number</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.CreditCard.isValid(SynPSG.Core.Utilities.CreditCardType,Synergex.SynergyDE.a)">
      <summary>
      Check credit card is a valid card number
      </summary>
       <param name="a_ccType">Card type</param>
       <param name="a_ccNumber">Credit card number</param>
      <remarks>
      Reference: http://en.wikipedia.org/wiki/Credit_card_numbers
      </remark>
    </member>
    <member name="M:SynPSG.Core.Utilities.CreditCard.getCCname(Synergex.SynergyDE.i)">
      <summary>
      Get Card Name
      </summary>
       <param name="
       <param name="a_ccType">Card type</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.CreditCard.getCCname(SynPSG.Core.Utilities.CreditCardType)">
      <summary>
      Get Card Name
      </summary>
       <param name="a_ccType">Card type</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.CreditCard.getCCtype(Synergex.SynergyDE.i)">
      <summary>
      
      </summary>
       <param name="a_ccType">Card type</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.CreditCard.mod10(Synergex.SynergyDE.a)">
      <summary>
      Modulus 10 checker.
      </summary>
       <param name="aText">string containing number for mod10 validation</param>
    </member>
    <member name="P:SynPSG.Core.Utilities.Encryption.EncryptionCode">
      <summary>
      Get Encryption Code
      </summary>
      <remarks>
      This is the only public mechanism to access the Encyption code.
      Due to the sensitive nature of the EncryptionCode, you probably
      need to store it seperately/centrally, and encapsulate it inside
      this class, instead of the application providing it.
      There is no way to reconstruct the EncryptionCode if you no
      longer know the EncryptionCode value.
      </remark>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.getEncryptionCode">
      <summary>
      Get Encryption Code (called from constructor)
      </summary>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.#ctor">
      <summary>
      constructor (no encryption)
      </summary>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.#ctor">
      <summary>
      "default" constructor
      </summary>
       <param name="aEncryptionType">Encryption type</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.#ctor">
      <summary>
      constructor
      </summary>
       <param name="aEncryptionType">Encryption type</param>
       <param name="aSalt">Salt</param>
       <param name="aIV">IV<param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.#ctor">
      <summary>
      primary constructor (for encryption)
      </summary>
       <param name="aEncryptionType">Encryption type</param>
       <param name="aSalt">Salt</param>
       <param name="aIV">IV<param>
       <param name="aPadBuffer">Pad buffer if data is same length as encryption key<param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.Encrypt(Synergex.SynergyDE.a)">
      <summary>
      Encrypt data using provide encryption code
      </summary>
       <param name="aData">Data to be encrypted</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.Encrypt(Synergex.SynergyDE.a,Synergex.SynergyDE.i)">
      <summary>
      Encrypt data using provide encryption code (primary routine)
      </summary>
       <param name="aData">Data to be encrypted</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.Encrypt(System.String)">
      <summary>
      Encrypt data using provide encryption code
      </summary>
       <param name="aData">Data to be encrypted</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.Decrypt(Synergex.SynergyDE.a)">
      <summary>
      Encrypt data using provide encryption code
      </summary>
       <param name="aData">Data to be decrypted</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.Decrypt(Synergex.SynergyDE.a,Synergex.SynergyDE.i)">
      <summary>
      Decrypt data using provide encryption code (primary routine)
      </summary>
       <param name="aData">Data to be decrypted</param>
       <param name="aLen">Length of decrypted data</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.Decrypt(System.String)">
      <summary>
      Encrypt data using provide encryption code
      </summary>
       <param name="aData">Data to be decrypted</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.getEncryptedLength(Synergex.SynergyDE.a)">
      <summary>
      
      </summary>
       <param name="aData">Data top be encrypted</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.getEncryptedLength(System.String)">
      <summary>
      
      </summary>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.usingEncryption">
      <summary>
      Is Encryption in use
      </summary>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.getLengths(Synergex.SynergyDE.i,Synergex.SynergyDE.i)">
      <summary>
      Get Salt and IV lengths
      </summary>
       <param name="aSaltLen">Length of Salt</param>
       <param name="aIVLen">Length of IV</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.getEncryptionType">
      <summary>
      Get Encryption Type (for Synergy API)
      </summary>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.dbg_data_encrypt(Synergex.SynergyDE.i,Synergex.SynergyDE.a,Synergex.SynergyDE.a,Synergex.SynergyDE.a,Synergex.SynergyDE.i,Synergex.SynergyDE.a,Synergex.SynergyDE.a,Synergex.SynergyDE.i)">
      <summary>
      Debug logging for data_encrypt
      </summary>
       <param name="aEncryptionType">Encryption type</param>
       <param name="aCode">Encryption code</param>
       <param name="aData">Data to be encrypted</param>
       <param name="aEncodedData">Encoded data</param>
       <param name="aLen">Length of encoded data</param>
       <param name="aSalt">Salt</param>
       <param name="aIV">IV</param>
       <param name="aPadBuffer">Pad Buffer</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.dbg_data_decrypt(Synergex.SynergyDE.i,Synergex.SynergyDE.a,Synergex.SynergyDE.a,Synergex.SynergyDE.a,Synergex.SynergyDE.i,Synergex.SynergyDE.a,Synergex.SynergyDE.a,Synergex.SynergyDE.i)">
      <summary>
      Debug logging for data_decrypt
      </summary>
       <param name="aEncryptionType">Encryption type</param>
       <param name="aCode">Encryption code</param>
       <param name="aData">Data to be encrypted</param>
       <param name="aDecodedData">Decoded data</param>
       <param name="aLen">Length of decoded data</param>
       <param name="aSalt">Salt</param>
       <param name="aIV">IV</param>
       <param name="aPadBuffer">Pad Buffer</param>
    </member>
    <member name="M:SynPSG.Core.Utilities.Encryption.dbg_data_saltiv(Synergex.SynergyDE.i,Synergex.SynergyDE.a,Synergex.SynergyDE.i,Synergex.SynergyDE.a,Synergex.SynergyDE.i)">
      <summary>
      Debug logging for data_saltiv
      </summary>
       <param name="aEncryptionType">Encryption type</param>
       <param name="aSalt">Salt</param>
       <param name="aSaltLEn">Length of Salt</param>
       <param name="aIV">IV</param>
       <param name="aIVLen">Length of IV</param>
    </member>
  </members>
</doc>

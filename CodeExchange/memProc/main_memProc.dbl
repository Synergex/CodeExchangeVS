main

.include 'INC:memProc.def'

record
    iChan           ,i4             ;; input channel
    oChan           ,i4             ;; output channel
    loop            ,i4             ;; loop counter
    optn            ,a1             ;; option
    key_flds        ,a38            ;; key fields string

proc

    xcall flags(7004020, 1)

    open(1, o, 'TT:')

    writes(1, "")
    writes(1, "MEMPROC v1.0")

    repeat
    begin
        writes(1, "")
        open(iChan = %syn_freechn, I:I, D_MP_FILE) [ERR=nofile]
        close iChan
        writes(1, D_MP_FILE+" exists")
        if(false)
        begin
nofile,
            writes(1, D_MP_FILE+" does not exist")
        end

        open(iChan = %syn_freechn, I:I, D_MP_DUPSFILE) [ERR=nodupsfile]
        close iChan
        writes(1, D_MP_DUPSFILE+" exists")
        if(false)
        begin
nodupsfile,
            writes(1, D_MP_DUPSFILE+" does not exist")
        end
        open(iChan = %syn_freechn, I:I, D_MP_LOGFILE) [ERR=nologfile]
        close iChan
        writes(1, D_MP_LOGFILE+" exists")
        if(false)
        begin
nologfile,
            writes(1, D_MP_LOGFILE+" does not exist")
        end
        writes(1, "")
        writes(1, "1 - Delete all files")
        writes(1, "2 - Restart mem_proc logging")
        writes(1, "3 - List contents to "+D_MP_LOGFILE)
        writes(1, "X - Exit")
        display(1, "Select Option : ")
        accept(1, optn)
        writes(1, "")
        writes(1, "")

        using optn select
        ('1'),
        begin
            xcall delet(D_MP_FILE)
            xcall delet(D_MP_DUPSFILE)
            xcall delet(D_MP_LOGFILE)
        end
        ('2'),
        begin
            xcall delet(D_MP_DUPSFILE)
            xcall isamc(D_MP_FILE, ^size(mpLog), 1,
            & 'START=1,LENGTH='+%string(^size(mpLog.key0))+',NODUPS,NOMODIFY,ASCEND')
        end
        ('3'),
        begin
            ;; nothing written to log file
            optn = 'N'

            call list_contents

            using optn select
            ('N'),
                writes(1, "Did not create "+D_MP_LOGFILE)
            ('Y'),
                writes(1, "Created "+D_MP_LOGFILE)
            endusing
        end
        ('X', 'x'),
            exitloop
        endusing
    end

    close 1
    stop D_EXIT_SUCCESS

;;---------------------------------------------------------------------------

list_contents,

    open(oChan=%syn_freechn, O, D_MP_LOGFILE) [ERR=list_open_error]

    for loop from 1 thru 2
    begin
        using loop select
        (1),
        begin
            xcall fill('*', key_flds)
            key_flds(1:%trim(D_MP_FILE)+1) = D_MP_FILE
            writes(oChan, key_flds)

            open(iChan=%syn_freechn, I:I, D_MP_FILE) [ERR=list_nofile]
        end
        (2),
        begin
            xcall fill('*', key_flds)
            key_flds(1:%trim(D_MP_DUPSFILE)+1) = D_MP_DUPSFILE
            writes(oChan, key_flds)

            open(iChan=%syn_freechn, I, D_MP_DUPSFILE) [ERR=list_nofile]
        end
        endusing

        repeat
        begin
            reads(iChan, mpLog, list_eof) [ERR=read_err]

            ;; something written to log file
            optn = 'Y'

            key_flds = ^a(mpLog.pid) + " " + %string(mpLog.hdl,'ZZZZZZZZZX-') + " " +
            &   mpLog.date_time(1:8) + ":" +
            &   mpLog.date_time(9:2) + ":" +  mpLog.date_time(11:2) + ":" + mpLog.date_time(13:2) + ":" + mpLog.date_time(15:3)
            writes(oChan, key_flds+" "+%atrim(mpLog.alloc_data[1]))
            clear key_flds
            writes(oChan, key_flds+" "+%atrim(mpLog.alloc_data[2]))
            writes(oChan, key_flds+" "+%atrim(mpLog.alloc_data[3]))
            writes(oChan, key_flds+" "+%atrim(mpLog.alloc_data[4]))
        end

        if(0)
        begin
read_err,
            writes(1, "Error "+%string(%error)+" occurred")
        end
list_eof,
        close iChan

list_nofile,
    end

    if(optn) then
    begin
        xcall fill('*', key_flds)
        writes(oChan, key_flds)

        close oChan
    end
    else
        purge oChan

    if(false)
    begin
list_open_error,
        writes(1, "Error "+%string(%error)+" occurred opening "+D_MP_LOGFILE)
        optn = '*'
    end

    return

end

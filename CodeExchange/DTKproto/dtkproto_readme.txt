README.TXT for DTKPROTO

Description
-----------

This program will create a source file (per window library) that contains
explicit xcalls to all the UI Toolkit callback methods used.  The source
file produced can be compiled, for comparison with prototype files
generated by DBLPROTO.

Compiling the generated source code will validate that the UI toolkit
parameters are correctly defined (in your sources) and that the application
is using the appropriate toolkit callback methods.

This program works by iterating through a window library, and interrogates
the data to determine if the record is for an input window or list class.
If it's one of those types, the window/class is loaded, and it is
interrogated to determine is there are any associated methods.  If there
are associated methods, explicit calls (using default parameters) for those
methods are written into a dummy source file.


Assumptions:
1) You have strongly prototyped your application
2) All windows (including selection windows) are in the same window library
3) APP_HEIGHT and APP_WIDTH are large enough to load all windows
4) All toolkit methoddata parameters are optional in your code

You may need to add IMPORTs or .INCLUDEs to the source generated,
to resolve namespace issues.

If you have made any of the UI Toolkit methoddata parameters REQUIRED,
compiling the generated source will generate an error. Any REQPARM errors,
on or after the first methoddata parameter number can be ignored.  The
parameter number of the first methoddata parameter is appended to the
source line as a comment, to help identify this issue.

The generated source can also be used as a form of documentation, as it
"documents" the fields that are using UI Toolkit callback methods.

If you have not strongly prototyped your application, this program will
not perform any function, except to "document" which windows/fields use
UI Toolkit callback methods.

If you see ";skipped input window: xxxxx".  This means there was an
error loading the input window.  This is usually caused by dependant
/ child windows (e.g. selection window) that are missing from the
window library.  If a UI Toolkit error message is available, it will
be shown on the same line, enclosed by [].  e.g.

;skipped input window: MYTEST  [Window sel_enum_0 not found in library 12]

Note: the "12" in the error message is the channel number of the
window library.


Usage
-----

dbr DTKPROTO -w winlib <winlib2> <winlib3> ... <winlib10> <-l>

-w = specify up to to 10 window libraries on the command line.
-l = logging to <winlib>_LOG.LOG

If you do not specify the -w option, the program will look at the
environment variable DTKPROTO_WINLIB for the name of a single window
library.



Example usage
-------------

Create your window library as usual.  Run DTKPROTO using

dbr DTKPROTO -w EXE:winlib.ism

Assuming your window library is called "winlib", this will create two files
in the current folder, with the names "winlib_SRC.DBL" and "winlib_INC.DBL".
The *_INC.DBL is included into the *_SRC.DBL file, and contains a list of
the external functions (e.g. change methods) that are used.

If you do not rely upon SYNDEFNS to define your only namespace, you will
need to edit *_SRC.DBL, and add the appropriate IMPORT/.INCLUDE statements
to add your namepsace(s)

Then recompile the generated *_SRC.DBL file, and see if it reports any
compiler errors.

If you do have any of the "optional" UI Toolkit parameters set as REQUIRED,
you will see the following error:

2473   sts=%DTR_city_change(data_entered, data_stored, pending_status, inputinfo, inprec) ;change opt=6
%DBL-E-REQPARM, Missing required parameter 7 in routine DTR_city_change
2478   sts=%DTR_state_change(data_entered, data_stored, pending_status, inputinfo, inprec) ;change opt=6
%DBL-E-REQPARM, Missing required parameter 7 in routine DTR_state_change

You can see that there is a comment "change opt=6" at the end of the source
line.  This means that the function is a change method, and the first optional
(UI toolkit methoddata) parameter is the 6th parameter. So if you have a
naming convention that allows you to confirm the method type from the name,
you can validate that the routine is being called in the correct circumstances,
Also any REQPARM errors for a parameter >= 6, refers to one of the methoddata
parameters, and can probably be safely ignored.  From a strong prototyping
perspective, the only reason to define UI Toolkit methoddata parameters as
required, would be if you're using an object datatype as a parameter.

You need to review all errors and decide if any errors require attention.


Submission details
------------------

Author:                 William Hawkins
Company:                Synergex
Email:                  William.Hawkins@synergex.com
Date:                   22nd September 2009
Minimum version:        Synergy 9.2.1a
Platforms:              System code 101
Compiler command:       DBL DTKPROTO
Link command            DBLINK DTKPROTO WND:tklib.elb

Modification history
--------------------

20th Sept 2010
        Updated for compatibility with Synergy 9.5


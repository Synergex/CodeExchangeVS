; README for PARTIALMATCH.DBL
;
; Description of function
; -----------------------
;
; This function will read a synergy isam file and count the number of
; records that match a partial key provided.  This function must be defined as
; a ^VAL function, and will return the count as the function return value.
;
; NOTE : please ensure the A_KEY is to correct lenght.  Trailing spaces may
; affect the count of matching records.
;
;
; A test program can be generated by defining BUILD_EXE
;
;
; NOTE : The READS uses a LOCK:Q_NO_TLOCK which does not reprobe the index
; before every read.  This is for performance reasons.  If used on a file that
; has a lot of stores or deletes, the use of Q_NO_TLOCK may provide an
; inaccurate count. For maximum reliabilty in heavily used files, use Q_NO_LOCK.
;
;
; Submission details
; ------------------
;
; Author:                 William Hawkins
; Company:                Synergex
; Email:                  William.Hawkins@synergex.com
; Date:                   25th August 2003
; Minimum version:        Synergy 7.1
; Platforms:              Any
; Compiler command:       DBL partialmatch
; Link command            none (link it into an elb)

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function PartialMatch ,i
    a_chan              ,n              ;REQUIRED channel number
    a_key               ,a              ;REQUIRED key value to match
    a_keyno             ,n              ;OPTIONAL key number

.align
    record clr_i
        keyno               ,i4             ;key number
        count               ,i4             ;record count
        rhdl                ,D_HANDLE       ;handle for record structure
        reclen              ,i4             ;record length

proc

    clear ^i(clr_i)

    ;used passed key number, or default to key 0
    if(^passed(a_keyno))
        keyno = a_keyno

    ;get record length
    reclen = %isinfo(a_chan, 'SIZE')

    ;allocate memory for record
    rhdl = %mem_proc(DM_ALLOC, reclen)

    ;find first key match
    read(a_chan, ^m(rhdl), a_key, KEYNUM=keyno, LOCK=Q_NO_LOCK) [ERR=no_data]

    do  begin
        ;increment match count
        count += 1

        ;read next record
        reads(a_chan, ^m(rhdl), no_data, LOCK=Q_NO_TLOCK)
    end
    until(a_key .ne. %keyval(a_chan, ^m(rhdl), keyno))
    ;check key still matches

no_data,
    freturn count

end

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

